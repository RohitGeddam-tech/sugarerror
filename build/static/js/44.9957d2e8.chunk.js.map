{"version":3,"sources":["pages/Admin/Patients/List/PatientList.jsx"],"names":["patientColumnDefs","labelAsIcon","Checkbox","accessKey","keyToCheck","renderIcon","isCheckbox","isMobile","label","dateFilter","show","selectDateRange","selectsDateRange","cellRenderer","row","members","PatientList","useWindowSize","width","useState","data","pagination","patientList","setPatientList","per_page","sort","current_page","date_from","moment","subtract","format","date_to","filter","setFilter","loading","setLoading","selectedData","setSelectedData","start","end","setState","getPatientList","useCallback","search","a","url","length","map","item","key","value","fetchRequest","method","isAuth","res","status","json","meta","useEffect","getListPerPage","pg","getSelectedData","ranges","Today","toDate","Yesterday","startOf","endOf","className","path","id","initialSettings","maxDate","Date","startDate","endDate","autoUpdateInput","onCallback","_d","CalendarFilter","placeholder","Filter","columnDefs","tableData","isButtonCard","DownArrow","isLoading","listName"],"mappings":"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","file":"static/js/44.9957d2e8.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Checkbox, DownArrow, Filter, CalendarFilter } from '../../../../assets/icons';\n// import PathLabTable from './PathLabTable';\nimport useWindowSize from '../../../../hooks/userWindowSize';\nimport SearchBox from '../../../../components/Common/SearchBox/SearchBox';\nimport Table from '../../../../components/Table/Table';\nimport { fetchRequest } from '../../../../utils/api';\nimport ExportExcel from '../../../../components/ExportExcel/ExportExcel';\nimport moment from 'moment';\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\n\nconst patientColumnDefs = [\n  {\n    labelAsIcon: Checkbox,\n    accessKey: 'checked',\n    keyToCheck: 'uuid',\n    renderIcon: Checkbox,\n    isCheckbox: true,\n    isMobile: false, // Show this content on mobile or not\n  },\n  {\n    label: 'Date',\n    dateFilter: { show: true, selectDateRange: true },\n    selectsDateRange: true,\n    accessKey: 'date',\n  },\n  {\n    label: 'Name',\n    accessKey: 'name',\n  },\n  {\n    label: 'Patients in the account',\n    accessKey: 'members',\n    cellRenderer: row => row.members + ' members',\n  },\n  {\n    label: 'Mobile No.',\n    accessKey: 'mobile',\n  },\n  {\n    label: 'Email ID',\n    accessKey: 'email',\n  },\n];\n\nconst PatientList = () => {\n  const [width] = useWindowSize();\n  const [patientList, setPatientList] = useState({ data: [], pagination: {} });\n  const [filter, setFilter] = useState({\n    per_page: 15,\n    sort: [],\n    current_page: 1,\n    date_from: moment().subtract(1, 'year').format('YYYY-MM-DD'),\n    date_to: moment().format('YYYY-MM-DD'),\n  });\n  const [loading, setLoading] = useState(false);\n  const [selectedData, setSelectedData] = useState([]);\n  /* eslint-disable no-unused-vars */\n  const [state, setState] = useState({ start: moment(), end: moment() });\n\n  const getPatientList = useCallback(() => {\n    setLoading(true);\n    const { per_page = 15, current_page, search, date_from, date_to, sort } = filter;\n    if (per_page)\n      (async () => {\n        let url = `/super_admin/patients?per_page=${per_page}${current_page ? `&page=${current_page}` : ''}${\n          search ? `&search=${search}` : ''\n        }${date_from ? `&date_from=${date_from}` : ''}${date_to ? `&date_to=${date_to}` : ''}${\n          sort && sort.length ? sort.map(item => `&${item.key}=${item.value}`) : ''\n        }`;\n        const res = await fetchRequest({ url, method: 'GET', isAuth: true });\n\n        // Branch Filter\n        if (res && res.status === 200) {\n          setLoading(false);\n          const { data, meta } = await res.json();\n          setPatientList({ data, pagination: meta.pagination });\n          return data;\n        } else {\n          setLoading(false);\n        }\n        return;\n      })();\n  }, [filter]);\n\n  useEffect(() => {\n    getPatientList();\n  }, [filter, getPatientList]);\n\n  const getListPerPage = useCallback(pg => {\n    setFilter(filter => ({ ...filter, ...pg }));\n  }, []);\n\n  const getSelectedData = useCallback(data => setSelectedData(data), []);\n\n  const handleCallback = (start, end) => {\n    setState({ start, end });\n    setFilter({\n      ...filter,\n      date_from: moment(start._d).format('YYYY-MM-DD'),\n      date_to: moment(end._d).format('YYYY-MM-DD'),\n      current_page: 1,\n    });\n  };\n\n  const label = filter.date_from && moment(filter.date_from).format('DD-MM-YYYY') + ' to ' + moment(filter.date_to).format('DD-MM-YYYY');\n\n  const ranges = {\n    Today: [moment().toDate(), moment().toDate()],\n    Yesterday: [moment().subtract(1, 'days').toDate(), moment().subtract(1, 'days').toDate()],\n    'This Month': [moment().startOf('month').toDate(), moment().endOf('month').toDate()],\n    'Last 7 Days': [moment().subtract(6, 'days').toDate(), moment().toDate()],\n    'Last 30 Days': [moment().subtract(29, 'days').toDate(), moment().toDate()],\n    'Last 6 Months': [moment().subtract(6, 'months').toDate(), moment().toDate()],\n    'Last 1 Year': [moment().subtract(1, 'year').toDate(), moment().toDate()],\n  };\n\n  return (\n    <div className=\"paper card list-patient-container list-container\">\n      <div className=\"content-header\">\n        <div className=\"row\">\n          <div className=\"col-6 col-md-2\">\n            <p className=\"semi-bold title\">All Patients</p>\n          </div>\n          <div className=\"col-6 col-md-2\">\n            <div className=\"form-group text-right\">\n              <ExportExcel path={'/super_admin/patients_export'} filter={filter} selectedData={selectedData} />\n            </div>\n          </div>\n          <div className=\"col-md-4 customDatePicker-wrapper\">\n            <DateRangePicker\n              className=\"customDatePicker\"\n              id=\"customDatePicker\"\n              initialSettings={{\n                maxDate: new Date(),\n                startDate: moment().subtract(1, 'year').toDate(),\n                endDate: moment().toDate(),\n                ranges: ranges,\n                autoUpdateInput: true,\n              }}\n              onCallback={handleCallback}\n            >\n              <div className=\"customDatePicker-innerwrapper\">\n                <span className={label ? 'range-value' : 'range-placeholder'}>{label ? label : 'Select Range'}</span>\n                <label className=\"table-icon d-inline\">{CalendarFilter}</label>\n              </div>\n            </DateRangePicker>\n          </div>\n          <div className=\"push-4 col-md-4\">\n            <SearchBox setFilter={setFilter} filter={filter} placeholder=\"Search by Name or Mobile No.\" />\n          </div>\n        </div>\n        {width <= 768 ? (\n          <div className=\"d-flex justify-content-end mr-2 filter\">\n            <p className=\"mr-1\">{Filter}</p> <p>Filter</p>\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n      <div className=\"content-body\">\n        <Table\n          columnDefs={patientColumnDefs}\n          tableData={patientList.data}\n          pagination={{ ...patientList.pagination, getListPerPage }}\n          isButtonCard={<span className=\"next-arrow\">{DownArrow}</span>}\n          setFilter={setFilter}\n          filter={filter}\n          isLoading={loading}\n          listName=\"patients\"\n          getSelectedData={getSelectedData}\n        ></Table>\n      </div>\n    </div>\n  );\n};\nexport default PatientList;\n"],"sourceRoot":""}