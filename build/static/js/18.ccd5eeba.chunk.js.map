{"version":3,"sources":["components/FormInputs/TextInput/TextInput.jsx","components/FormInputs/SelectInput/SelectInput.jsx","components/Notification/Notification.jsx","components/Common/Card/Card.jsx","hooks/useDebounce.js","components/Common/SearchBox/SearchBox.jsx","pages/LabDetails/BranchDetails/BranchList.jsx","components/Modal/ConfirmationModal.jsx","components/Loader/Loader.jsx"],"names":["TextInput","type","placeholder","value","name","onChange","onBlur","error","disabled","icon","className","hasGrayBack","showPass","maxLength","ref","useState","showPassword","setShowPassword","hasError","inputRef","useRef","autoComplete","onClick","hidePasswordEye","showPasswordEye","SelectInput","options","isMulti","hideSelectedOptions","isClearable","isLoading","hidePlaceholder","defaultValue","isSearchable","parentClass","parentRef","classNamePrefix","onFocus","current","classList","add","remove","removeSelected","isDisabled","Notification","message","callback","notify","useCallback","toast","success","position","POSITION","BOTTOM_RIGHT","setTimeout","info","warn","useEffect","Card","title","children","list","cardType","centerHeader","cardName","searchBox","onSelectInputChange","input","length","role","useDebounce","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","memo","setFilter","filter","searchTerm","setSearchTerm","debouncedSearchTerm","search","current_page","e","target","Search","BranchList","profile","useContext","ProfileContext","loginAs","localStorage","getItem","labId","setLabId","branchList","setBranchList","actionObject","setActionObject","show","notification","setNotification","loading","setLoading","selectedRole","uuid","selectedLabId","getBranchList","a","fetchRequest","url","method","isAuth","res","status","json","data","to","AddBox","map","branch","ind","key","address_line_one","address_line_two","city","state","pincode","mobile","pathname","red","msg","cancelAction","confirmAction","handleSuccess","isModalOpen","defaultState","isThankYouModal","ConfirmationModal","redirect","history","modal","handleModalToggle","handleConfirmAction","push","body","errObj","Object","keys","confirmActionType","modalIsOpen","closeModal","Loader"],"mappings":"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","file":"static/js/18.ccd5eeba.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { hidePasswordEye, showPasswordEye } from '../../../assets/icons';\n\nfunction TextInput({\n  type,\n  placeholder,\n  value,\n  name,\n  onChange,\n  onBlur,\n  error,\n  disabled = false,\n  icon,\n  className = '',\n  hasGrayBack = false,\n  showPass,\n  maxLength,\n  ref,\n}) {\n  const [showPassword, setShowPassword] = useState(false);\n  let hasError = error ? 'has-error' : '';\n  className += ` form-control `;\n  const inputRef = useRef(null);\n  return (\n    <>\n      <div className={`input-group text-input ${hasError} ${hasGrayBack ? 'background-gray' : ''}`}>\n        <input\n          type={(showPass ? (!showPassword ? 'password' : 'text') : type) || 'text'}\n          className={className}\n          name={name}\n          value={value}\n          onChange={onChange}\n          autoComplete=\"off\"\n          ref={ref || inputRef}\n          disabled={disabled}\n          onBlur={onBlur}\n          maxLength={maxLength}\n        />\n        <label className=\"input-placeholder\">{placeholder}</label>\n        {icon ? <span className=\"input-icon\">{icon}</span> : <></>}\n        {showPass ? (\n          <span className=\"input-icon cursor-pointer\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? hidePasswordEye : showPasswordEye}\n          </span>\n        ) : (\n          <></>\n        )}\n        {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n      </div>\n    </>\n  );\n}\nexport default TextInput;\n","import React, { useRef } from 'react';\nimport Select from 'react-select';\n\nconst SelectInput = ({\n  className = '',\n  options = [],\n  value,\n  onChange,\n  placeholder,\n  error,\n  hasGrayBack = false,\n  isMulti = false,\n  hideSelectedOptions = true,\n  isClearable = true,\n  disabled,\n  isLoading,\n  hidePlaceholder,\n  defaultValue,\n  isSearchable = false,\n}) => {\n  let parentClass = `input-group select-control-input ${error ? 'has-error' : ''} ${hasGrayBack ? 'background-gray' : ''} ${\n    value && value.value ? 'has-value' : ''\n  } ${hidePlaceholder ? 'hide-placeholder' : ''} ${disabled ? 'cursor-notAllowed' : ''}`;\n\n  className += ` select-input `;\n  const parentRef = useRef(null);\n  return (\n    <>\n      <div className={parentClass} ref={parentRef}>\n        <Select\n          value={value}\n          onChange={onChange}\n          options={options}\n          className={className}\n          classNamePrefix=\"select-input\"\n          placeholder={<div>{''}</div>}\n          onFocus={() => parentRef.current.classList.add('select-focused')}\n          onBlur={() => parentRef.current.classList.remove('select-focused')}\n          isClearable={isClearable}\n          isMulti={isMulti}\n          removeSelected={false}\n          defaultValue={defaultValue}\n          isDisabled={disabled}\n          isLoading={isLoading}\n          isSearchable={isSearchable}\n        />\n        <label className=\"select-placeholder\">{placeholder}</label>\n      </div>\n      {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n    </>\n  );\n};\nexport default SelectInput;\n","import React, { useEffect, useCallback } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Notification({ message, type, callback }) {\n  const notify = useCallback(\n    type => {\n      switch (type) {\n        case 'success': {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          setTimeout(() => {\n            callback && callback();\n          }, 1500);\n          break;\n        }\n        case 'error':\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'info':\n          toast.info(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'warn':\n          toast.warn(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        default:\n          break;\n      }\n    },\n    [callback, message],\n  );\n\n  useEffect(() => {\n    if (message && type) notify(type);\n  }, [message, notify, type]);\n\n  return (\n    <div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SelectInput from '../../FormInputs/SelectInput/SelectInput';\nimport SearchBox from '../SearchBox/SearchBox';\n\nconst Card = ({\n  title,\n  children,\n  list = [],\n  value,\n  cardType = 'table',\n  centerHeader = false,\n  cardName = '',\n  className = '',\n  searchBox,\n  onSelectInputChange,\n  isLoading = false,\n  input,\n}) => {\n  return (\n    <div className={`paper paper-card ${cardType === 'number' ? 'number-card' : ''} ${cardName} ${className}`}>\n      <div className={`content-header d-flex align-items-baseline ${centerHeader ? 'justify-content-center' : 'justify-content-between'}`}>\n        <p className=\"title\">{title}</p>\n        {input ? (\n          input\n        ) : list.length ? (\n          <div className=\"select-wrapper\">\n            <SelectInput\n              options={list}\n              value={value}\n              onChange={value => onSelectInputChange(value)}\n              isClearable={false}\n              isSearchable={false}\n            />\n          </div>\n        ) : (\n          <></>\n        )}\n        {searchBox ? <SearchBox /> : <></>}\n      </div>\n      {isLoading ? (\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : cardType === 'number' ? (\n        <div className=\"count font-weight-bold\">{children}</div>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\nCard.propTypes = { title: PropTypes.string, content: PropTypes.string, list: PropTypes.array };\n\nexport default Card;\n","import { useEffect, useState } from 'react';\n\nconst useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import React, { memo, useEffect, useState } from 'react';\nimport { Search } from '../../../assets/icons';\nimport useDebounce from '../../../hooks/useDebounce';\nimport TextInput from '../../FormInputs/TextInput/TextInput';\n\nconst SearchBox = ({ setFilter, filter, className = '', placeholder }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  // const [results, setResults] = useState([]);\n  // const [isSearching, setIsSearching] = useState(false);\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  useEffect(\n    () => {\n      if (setFilter) {\n        if (debouncedSearchTerm) {\n          setFilter({ ...filter, search: debouncedSearchTerm, current_page: 1 });\n          // setIsSearching(true);\n          // searchCharacters(debouncedSearchTerm).then(results => {\n          //   setIsSearching(false);\n          //   setResults(results);\n          // });\n        } else {\n          setFilter({ ...filter, search: '',current_page: 1 });\n          // setResults([]);\n        }\n      }\n    },\n    [debouncedSearchTerm], // eslint-disable-line react-hooks/exhaustive-deps\n    // Only call effect if debounced search term changes\n  );\n\n  return (\n    <div className={`form-group search-input-wrapper ${className}`}>\n      <TextInput\n        placeholder={placeholder}\n        value={searchTerm || ''} // Its taking null if no value is passed. Hence empty string passed\n        onChange={e => setSearchTerm(e.target.value)}\n        icon={Search}\n        className=\"search-input\"\n      ></TextInput>\n    </div>\n  );\n};\n\nexport default memo(SearchBox);\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport Card from '../../../components/Common/Card/Card';\nimport { Link } from 'react-router-dom';\nimport { fetchRequest } from '../../../utils/api';\nimport { ProfileContext } from '../../../context/context';\nimport { AddBox } from '../../../assets/icons';\nimport { TextButton } from '../../../components/Buttons/Button';\nimport ConfirmationModal from '../../../components/Modal/ConfirmationModal';\nimport Notification from '../../../components/Notification/Notification';\nimport Loader from '../../../components/Loader/Loader';\n\nfunction BranchList() {\n  const { profile } = useContext(ProfileContext);\n  const loginAs = localStorage.getItem('loginAs');\n  const [labId, setLabId] = useState(); //lab_group uuid from profile api\n  const [branchList, setBranchList] = useState([]);\n  const [actionObject, setActionObject] = useState({});\n  const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (profile && loginAs === 'lab-admin') {\n      setLabId(profile.selectedRole.uuid);\n    } else if (profile && (loginAs === 'super-admin' || loginAs === 'assistant-admin')) {\n      setLabId(profile.selectedLabId);\n    }\n  }, [profile, loginAs]);\n\n  const getBranchList = useCallback(async () => {\n    setLoading(true);\n    const res = await fetchRequest({ url: `/lab_group/${labId}/get_labs`, method: 'GET', isAuth: true });\n    if (res && res.status === 200) {\n      setLoading(false);\n      const { data } = await res.json();\n      setBranchList(data);\n      return data;\n    }\n    return;\n  }, [labId]);\n\n  useEffect(() => {\n    if (labId) getBranchList();\n  }, [labId, getBranchList]);\n\n  return (\n    <div className=\"d-flex flex-wrap branch-details-wrapper w-100\">\n      <Loader loading={loading} />\n      <Notification {...notification} />\n      {!loading && (\n        <>\n          {' '}\n          <div className=\"branch-details-card add-branch-btn-card\">\n            <Link\n              className=\"add-branch-btn text-center\"\n              to={`${\n                loginAs === 'lab-admin'\n                  ? '/lab-admin/setting'\n                  : loginAs === 'assistant-admin'\n                  ? '/assistant-admin/lab-details/branch-details'\n                  : '/super-admin/lab-details/branch-details'\n              }/add-branch-details`}\n            >\n              {AddBox} <br />\n              Add a branch\n            </Link>\n          </div>\n          {branchList &&\n            branchList.map((branch, ind) => (\n              <div className=\"branch-details-card\" key={ind}>\n                <Card title={branch.name ? branch.name : '-'}>\n                  <address className=\"mt-2 mb-0\">\n                    {`${branch.address_line_one || '-'}, ${branch.address_line_two || ''}, `}\n                    <br/>{`${branch.city || '-'}, ${branch.state || '-'}, ${branch.pincode || '-'}`}\n                  </address>\n                  <div className=\"phone-no mb-2\">Phone Number: {branch.mobile ? branch.mobile : '-'}</div>\n                  <div className=\"d-flex align-items-center fixed-bottom\">\n                    <Link\n                      className=\"link-btn semi-bold blue-text\"\n                      to={{\n                        pathname: `${\n                          loginAs === 'lab-admin'\n                            ? `/lab-admin/setting/branch-settings`\n                            : loginAs === 'assistant-admin'\n                            ? '/assistant-admin/branch-settings'\n                            : '/super-admin/branch-settings'\n                        }/${branch.uuid}/name-and-address`,\n                      }}\n                    >\n                      Branch Setting\n                    </Link>\n                    {loginAs === 'lab-admin' && (\n                      <>\n                        {' '}\n                        <p className=\"divider\"></p>\n                        <TextButton\n                          red\n                          className=\"delete-btn\"\n                          onClick={() => {\n                            setActionObject({\n                              title: 'Confirmation',\n                              msg: 'Are you sure you want to delete this branch? It will be erased completely and you cannot undo it.',\n                              cancelAction: 'Go Back',\n                              confirmAction: 'Delete',\n                              method: 'DELETE',\n                              url: `/lab_group/${labId}/lab/${branch.uuid}`,\n                              handleSuccess: data => {\n                                data.message &&\n                                  setNotification({\n                                    show: true,\n                                    message: data.message,\n                                    type: 'success',\n                                  });\n                                setTimeout(() => getBranchList(), 2000);\n                              },\n                              setNotification: setNotification,\n                              isModalOpen: true,\n                            });\n                          }}\n                        >\n                          Delete Branch\n                        </TextButton>\n                      </>\n                    )}\n                  </div>\n                </Card>\n              </div>\n            ))}\n        </>\n      )}\n      <ConfirmationModal actionObject={actionObject}></ConfirmationModal>\n    </div>\n  );\n}\n\nexport default BranchList;\n","import React, { useState, useEffect } from 'react';\nimport { ContainedButton, OutlinedButton } from '../Buttons/Button';\nimport { CustomModal, ModalHeader, ModalBody, ModalFooter } from './Modal';\nimport { fetchRequest } from '../../utils/api';\n\nconst defaultState = {\n  title: '',\n  msg: '',\n  cancelAction: '',\n  confirmAction: '',\n  method: '',\n  data: null,\n  url: '',\n  handleSuccess: '',\n  isModalOpen: false,\n  isThankYouModal: false,\n};\n\nconst ConfirmationModal = ({ actionObject = defaultState }) => {\n  const {\n    title,\n    msg,\n    cancelAction,\n    confirmAction,\n    method,\n    data,\n    url,\n    handleSuccess,\n    isModalOpen,\n    redirect,\n    history,\n    setNotification,\n    isThankYouModal,\n  } = actionObject;\n  const [modal, handleModalToggle] = useState(isModalOpen);\n\n  useEffect(() => {\n    handleModalToggle(isModalOpen);\n  }, [actionObject, isModalOpen]);\n\n  const handleConfirmAction = async () => {\n    if (redirect) {\n      history.push(redirect);\n      return;\n    }\n    const res = await fetchRequest({ url, method, isAuth: true, body: data });\n    if (res && res.status === 200) {\n      const data = await res.json();\n      if (data.success) {\n        handleModalToggle(false);\n        handleSuccess(data);\n      }\n    } else {\n      const errObj = await res.json();\n      setNotification && setNotification({ show: false, message: '', type: '' });\n      res.status !== 422 &&\n        !Object.keys(errObj.error ? errObj.error : {}).length &&\n        errObj.message &&\n        setNotification && setNotification({ show: true, message: errObj.message, type: 'error' });\n      handleModalToggle(false);\n    }\n    return;\n  };\n\n  let confirmActionType = method === 'DELETE' ? 'red' : 'black';\n\n  return (\n    <CustomModal className=\"confirmation-modal\" modalIsOpen={modal} closeModal={handleModalToggle}>\n      <ModalHeader className=\"justify-content-center\">\n        <h2 className=\"black-heading\">{title}</h2>\n      </ModalHeader>\n      <ModalBody className=\"mb-4 text-center\">\n        <p>{msg}</p>\n      </ModalBody>\n      <ModalFooter className=\"justify-content-center\">\n        {isThankYouModal ? (\n          <ContainedButton red onClick={() => handleModalToggle(false)}>\n            {cancelAction}\n          </ContainedButton>\n        ) : (\n          <OutlinedButton className=\"close-modal-btn mr-2\" onClick={() => handleModalToggle(false)}>\n            {cancelAction}\n          </OutlinedButton>\n        )}\n        {confirmAction && (\n          <ContainedButton onClick={handleConfirmAction} {...{ [confirmActionType]: true }}>\n            {confirmAction}\n          </ContainedButton>\n        )}\n      </ModalFooter>\n    </CustomModal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from 'react';\n\nconst Loader = ({ loading = false }) => {\n  return (\n    loading && (\n      <div className=\"loader-wrapper d-flex justify-content-center w-100\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Loader;\n"],"sourceRoot":""}