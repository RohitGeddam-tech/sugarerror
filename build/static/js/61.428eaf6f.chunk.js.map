{"version":3,"sources":["components/FormInputs/TextInput/TextInput.jsx","components/Notification/Notification.jsx","pages/Prelogin/Contact/Contact.jsx","components/Modal/ConfirmationModal.jsx","components/FormInputs/Textarea/Textarea.jsx"],"names":["TextInput","type","placeholder","value","name","onChange","onBlur","error","disabled","icon","className","hasGrayBack","showPass","maxLength","ref","useState","showPassword","setShowPassword","hasError","inputRef","useRef","autoComplete","onClick","hidePasswordEye","showPasswordEye","Notification","message","callback","notify","useCallback","toast","success","position","POSITION","BOTTOM_RIGHT","setTimeout","info","warn","useEffect","defaultState","email","mobile","description","Contact","contactData","setContactData","errors","setErrors","show","notification","setNotification","thankYouObject","setThankYouObject","window","scrollTo","handleChange","key","obj","handleOnSend","a","body","fetchRequest","url","method","res","status","json","data","title","msg","cancelAction","isModalOpen","isThankYouModal","errObj","Object","keys","length","actionObject","href","parentClasses","middleIconClass","action","e","target","rows","red","confirmAction","handleSuccess","ConfirmationModal","redirect","history","modal","handleModalToggle","handleConfirmAction","push","isAuth","confirmActionType","modalIsOpen","closeModal","Textarea"],"mappings":"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","file":"static/js/61.428eaf6f.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { hidePasswordEye, showPasswordEye } from '../../../assets/icons';\n\nfunction TextInput({\n  type,\n  placeholder,\n  value,\n  name,\n  onChange,\n  onBlur,\n  error,\n  disabled = false,\n  icon,\n  className = '',\n  hasGrayBack = false,\n  showPass,\n  maxLength,\n  ref,\n}) {\n  const [showPassword, setShowPassword] = useState(false);\n  let hasError = error ? 'has-error' : '';\n  className += ` form-control `;\n  const inputRef = useRef(null);\n  return (\n    <>\n      <div className={`input-group text-input ${hasError} ${hasGrayBack ? 'background-gray' : ''}`}>\n        <input\n          type={(showPass ? (!showPassword ? 'password' : 'text') : type) || 'text'}\n          className={className}\n          name={name}\n          value={value}\n          onChange={onChange}\n          autoComplete=\"off\"\n          ref={ref || inputRef}\n          disabled={disabled}\n          onBlur={onBlur}\n          maxLength={maxLength}\n        />\n        <label className=\"input-placeholder\">{placeholder}</label>\n        {icon ? <span className=\"input-icon\">{icon}</span> : <></>}\n        {showPass ? (\n          <span className=\"input-icon cursor-pointer\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? hidePasswordEye : showPasswordEye}\n          </span>\n        ) : (\n          <></>\n        )}\n        {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n      </div>\n    </>\n  );\n}\nexport default TextInput;\n","import React, { useEffect, useCallback } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Notification({ message, type, callback }) {\n  const notify = useCallback(\n    type => {\n      switch (type) {\n        case 'success': {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          setTimeout(() => {\n            callback && callback();\n          }, 1500);\n          break;\n        }\n        case 'error':\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'info':\n          toast.info(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'warn':\n          toast.warn(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        default:\n          break;\n      }\n    },\n    [callback, message],\n  );\n\n  useEffect(() => {\n    if (message && type) notify(type);\n  }, [message, notify, type]);\n\n  return (\n    <div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Notification;\n","import React, { useEffect, useState } from 'react';\nimport Container from '../../../components/Wrappers/Container';\nimport Socials from '../../../components/Common/Socials/Socials';\nimport TextInput from '../../../components/FormInputs/TextInput/TextInput';\nimport Textarea from '../../../components/FormInputs/Textarea/Textarea';\nimport { ContainedButton } from '../../../components/Buttons/Button';\nimport { fetchRequest } from '../../../utils/api';\nimport Notification from '../../../components/Notification/Notification';\nimport ConfirmationModal from '../../../components/Modal/ConfirmationModal';\n\nconst defaultState = {\n  name: '',\n  email: '',\n  mobile: '',\n  description: '',\n};\nexport default function Contact() {\n  const [contactData, setContactData] = useState({ ...defaultState });\n  const [errors, setErrors] = useState({});\n  const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n  const [thankYouObject, setThankYouObject] = useState();\n  const { name, email, mobile, description } = contactData;\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const handleChange = (value, key) => {\n    let obj = { ...contactData };\n    obj[key] = value;\n    setContactData({ ...obj });\n  };\n\n  const handleOnSend = async () => {\n    setErrors({});\n    setNotification({ show: false, message: '', type: '' });\n    let body = { ...contactData };\n\n    const res = await fetchRequest({ url: '/contact_us', method: 'POST', body });\n    if (res && res.status === 200) {\n      const data = await res.json();\n      if (data.success) {\n        setContactData({ ...defaultState });\n        data.message &&\n          setThankYouObject({\n            title: 'Thank you',\n            msg: 'Thank you for writing to us. We will contact you shortly.',\n            cancelAction: 'Close',\n            isModalOpen: true,\n            isThankYouModal: true,\n          });\n      }\n    } else {\n      const errObj = await res.json();\n      setErrors({ ...errObj.errors });\n      res.status !== 422 &&\n        !Object.keys(errObj.error ? errObj.error : {}).length &&\n        errObj.message &&\n        setNotification({ show: true, message: errObj.message, type: 'error' });\n    }\n  };\n\n  return (\n    <section className={`section-wrapper contact-us-section`}>\n      <Notification {...notification} />\n      {thankYouObject && <ConfirmationModal actionObject={thankYouObject}></ConfirmationModal>}\n      <Container>\n        <div className=\"contact-us-wrapper row flex-column\">\n          <div className=\"enquiry-question\">\n            <span className=\"black-heading text-uppercase\">HAVE A QUESTION?</span>\n            <br />\n            <span className=\"red-heading\">We’ll answer</span>\n            <p className=\"para my-5\">\n              Feel free to get in touch with us. We are always open to questions, doubts and new suggestions. Write to us or reach us and\n              we’ll get back to you soon.\n            </p>\n          </div>\n          <div className=\"write-us-section\">\n            <div className=\"flex-column mb-4\">\n              <div className=\"primary-gray\">You can also write to us at:</div>\n              <div><a href=\"mailto:sugarlogger.info@gmail.com\">sugarlogger.info@gmail.com</a></div>\n            </div>\n            <div className=\"flex-column mb-4\">\n              <div className=\"primary-gray\">Feel like talking? Call us</div>\n              <div><a href=\"tel:18008910235\">18008910235</a></div>\n            </div>\n            <div className=\"flex-column mb-4\">\n              <div className=\"primary-gray mb-3\">Follow us on:</div>\n              <div>\n                <Socials parentClasses=\"contact-us-social-links\" middleIconClass=\"mx-4\"></Socials>\n              </div>\n            </div>\n          </div>\n          <div className=\"form-section order-1\">\n            <form action=\"\" className=\"contact-us-form\">\n              <div className=\"form-group\">\n                <TextInput\n                  value={name}\n                  onChange={e => handleChange(e.target.value, 'name')}\n                  error={errors && errors['name']}\n                  placeholder=\"Name*\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <TextInput\n                  value={email}\n                  onChange={e => handleChange(e.target.value, 'email')}\n                  error={errors && errors['email']}\n                  placeholder=\"Email*\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <TextInput\n                  value={mobile}\n                  onChange={e => handleChange(e.target.value, 'mobile')}\n                  error={errors && errors['mobile']}\n                  placeholder=\"Mobile No.*\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <Textarea\n                  value={description}\n                  onChange={e => handleChange(e.target.value, 'description')}\n                  error={errors && errors['description']}\n                  placeholder=\"What do you want to say*\"\n                  rows=\"4\"\n                ></Textarea>\n              </div>\n              <div className=\"form-group\">\n                <ContainedButton red className=\"send-btn\" onClick={handleOnSend}>\n                  Send\n                </ContainedButton>\n              </div>\n            </form>\n          </div>\n        </div>\n      </Container>\n    </section>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { ContainedButton, OutlinedButton } from '../Buttons/Button';\nimport { CustomModal, ModalHeader, ModalBody, ModalFooter } from './Modal';\nimport { fetchRequest } from '../../utils/api';\n\nconst defaultState = {\n  title: '',\n  msg: '',\n  cancelAction: '',\n  confirmAction: '',\n  method: '',\n  data: null,\n  url: '',\n  handleSuccess: '',\n  isModalOpen: false,\n  isThankYouModal: false,\n};\n\nconst ConfirmationModal = ({ actionObject = defaultState }) => {\n  const {\n    title,\n    msg,\n    cancelAction,\n    confirmAction,\n    method,\n    data,\n    url,\n    handleSuccess,\n    isModalOpen,\n    redirect,\n    history,\n    setNotification,\n    isThankYouModal,\n  } = actionObject;\n  const [modal, handleModalToggle] = useState(isModalOpen);\n\n  useEffect(() => {\n    handleModalToggle(isModalOpen);\n  }, [actionObject, isModalOpen]);\n\n  const handleConfirmAction = async () => {\n    if (redirect) {\n      history.push(redirect);\n      return;\n    }\n    const res = await fetchRequest({ url, method, isAuth: true, body: data });\n    if (res && res.status === 200) {\n      const data = await res.json();\n      if (data.success) {\n        handleModalToggle(false);\n        handleSuccess(data);\n      }\n    } else {\n      const errObj = await res.json();\n      setNotification && setNotification({ show: false, message: '', type: '' });\n      res.status !== 422 &&\n        !Object.keys(errObj.error ? errObj.error : {}).length &&\n        errObj.message &&\n        setNotification && setNotification({ show: true, message: errObj.message, type: 'error' });\n      handleModalToggle(false);\n    }\n    return;\n  };\n\n  let confirmActionType = method === 'DELETE' ? 'red' : 'black';\n\n  return (\n    <CustomModal className=\"confirmation-modal\" modalIsOpen={modal} closeModal={handleModalToggle}>\n      <ModalHeader className=\"justify-content-center\">\n        <h2 className=\"black-heading\">{title}</h2>\n      </ModalHeader>\n      <ModalBody className=\"mb-4 text-center\">\n        <p>{msg}</p>\n      </ModalBody>\n      <ModalFooter className=\"justify-content-center\">\n        {isThankYouModal ? (\n          <ContainedButton red onClick={() => handleModalToggle(false)}>\n            {cancelAction}\n          </ContainedButton>\n        ) : (\n          <OutlinedButton className=\"close-modal-btn mr-2\" onClick={() => handleModalToggle(false)}>\n            {cancelAction}\n          </OutlinedButton>\n        )}\n        {confirmAction && (\n          <ContainedButton onClick={handleConfirmAction} {...{ [confirmActionType]: true }}>\n            {confirmAction}\n          </ContainedButton>\n        )}\n      </ModalFooter>\n    </CustomModal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from 'react';\n\nfunction Textarea({ placeholder, rows = 2, value, name, onChange, error, disabled = false, icon, className = '', maxLength, hasGrayBack }) {\n  let hasError = error ? 'has-error' : '';\n  className += ` form-control ${value ? 'has-value' : ''} ${hasGrayBack ? 'background-gray' : ''}`;\n  // const inputRef = useRef(null);\n  // if (error) {\n  //   inputRef.current.focus();\n  // }\n  return (\n    <>\n      <div className={`input-group text-area ${hasError}`}>\n        <textarea className={className} value={value} rows={rows} onChange={onChange} maxLength={maxLength} />\n        <label>{placeholder}</label>\n        {icon ? <span className=\"input-icon\">{icon}</span> : <></>}\n      </div>\n      {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n    </>\n  );\n}\n\nexport default Textarea;\n"],"sourceRoot":""}