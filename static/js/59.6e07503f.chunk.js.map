{"version":3,"sources":["components/FormInputs/TextInput/TextInput.jsx","components/Notification/Notification.jsx","pages/Login/Login.jsx","components/Wrappers/SectionWrapper.jsx","components/FormInputs/RadioButton/RadioButton.jsx","components/Modal/ResetPasswordModal.jsx"],"names":["TextInput","type","placeholder","value","name","onChange","onBlur","error","disabled","icon","className","hasGrayBack","showPass","maxLength","ref","useState","showPassword","setShowPassword","hasError","inputRef","useRef","autoComplete","onClick","hidePasswordEye","showPasswordEye","Notification","message","callback","notify","useCallback","toast","success","position","POSITION","BOTTOM_RIGHT","setTimeout","info","warn","useEffect","Login","props","email","setEmail","password","setPassword","errors","setErrors","setMessage","btnLoading","setBtnLoading","isModalOpen","api","resendPassModal","toggleResendPassModal","show","notification","setNotification","window","scrollTo","login","e","a","preventDefault","makeRequest","url","method","body","username","data","status","token_type","access_token","refresh_token","localStorage","setItem","isAuth","roles","newRoles","length","getNewRoles","role","split","join","JSON","stringify","history","push","pathname","state","sectionClass","onSubmit","Cancel","target","to","red","actionObject","SectionWrapper","children","RadioButton","label","checked","blue","CheckedRadioButtonIcon","RadioButtonIcon","dangerouslySetInnerHTML","__html","defaultState","ResetPasswordModal","profileContext","useContext","ProfileContext","modal","handleModalToggle","sendTo","setSendTo","mobileToSendLink","setMobileToSendLink","handleForgetPass","fetchRequest","send_to","mobile","res","json","errObj","Object","keys","profile","modalIsOpen","closeModal","lightBlue","loading"],"mappings":"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","file":"static/js/59.6e07503f.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { hidePasswordEye, showPasswordEye } from '../../../assets/icons';\n\nfunction TextInput({\n  type,\n  placeholder,\n  value,\n  name,\n  onChange,\n  onBlur,\n  error,\n  disabled = false,\n  icon,\n  className = '',\n  hasGrayBack = false,\n  showPass,\n  maxLength,\n  ref,\n}) {\n  const [showPassword, setShowPassword] = useState(false);\n  let hasError = error ? 'has-error' : '';\n  className += ` form-control `;\n  const inputRef = useRef(null);\n  return (\n    <>\n      <div className={`input-group text-input ${hasError} ${hasGrayBack ? 'background-gray' : ''}`}>\n        <input\n          type={(showPass ? (!showPassword ? 'password' : 'text') : type) || 'text'}\n          className={className}\n          name={name}\n          value={value}\n          onChange={onChange}\n          autoComplete=\"off\"\n          ref={ref || inputRef}\n          disabled={disabled}\n          onBlur={onBlur}\n          maxLength={maxLength}\n        />\n        <label className=\"input-placeholder\">{placeholder}</label>\n        {icon ? <span className=\"input-icon\">{icon}</span> : <></>}\n        {showPass ? (\n          <span className=\"input-icon cursor-pointer\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? hidePasswordEye : showPasswordEye}\n          </span>\n        ) : (\n          <></>\n        )}\n        {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n      </div>\n    </>\n  );\n}\nexport default TextInput;\n","import React, { useEffect, useCallback } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Notification({ message, type, callback }) {\n  const notify = useCallback(\n    type => {\n      switch (type) {\n        case 'success': {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          setTimeout(() => {\n            callback && callback();\n          }, 1500);\n          break;\n        }\n        case 'error':\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'info':\n          toast.info(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'warn':\n          toast.warn(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        default:\n          break;\n      }\n    },\n    [callback, message],\n  );\n\n  useEffect(() => {\n    if (message && type) notify(type);\n  }, [message, notify, type]);\n\n  return (\n    <div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Notification;\n","import React, { useEffect, useState } from 'react';\nimport { SectionWrapper } from '../../components/Wrappers/SectionWrapper';\nimport TextInput from '../../components/FormInputs/TextInput/TextInput';\nimport { ContainedButton } from '../../components/Buttons/Button';\nimport { Link, NavLink } from 'react-router-dom';\nimport { makeRequest } from '../../utils/api';\nimport { Cancel } from '../../assets/icons';\nimport ResetPasswordModal from '../../components/Modal/ResetPasswordModal';\nimport Notification from '../../components/Notification/Notification';\nimport { getNewRoles } from '../../utils/custom';\n\nfunction Login(props) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState(''); //123456\n  // const [rememberMe, setRememberMe] = useState(false);\n  const [errors, setErrors] = useState();\n  const [message, setMessage] = useState(null);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [resendPassModal, toggleResendPassModal] = useState({ isModalOpen: false, api: '' });\n  const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n  //login api call\n  const login = async e => { //TODO :  getRequest(url,headers,body,)\n    e.preventDefault();\n    setBtnLoading(true);\n    setMessage(null);\n\n    const { data, status, errors, message } = await makeRequest({\n      url: '/login',\n      method: 'POST',\n      body: { username: email || '', password: password || '' },\n    });\n    setBtnLoading(false);\n\n    if (status === 200) {\n      const { token_type, access_token, refresh_token } = data;\n      localStorage.setItem('token', `${token_type} ${access_token}`);\n      localStorage.setItem('refresh_token', `${refresh_token}`);\n\n      //checks profile\n      (async () => {\n        const { data, status } = await makeRequest({ url: `/user_profile?include=roles,lab_access`, method: 'GET', isAuth: true });\n        if (status === 200) {\n          const { roles } = data;\n          let newRoles = [];\n          if (roles && roles.length) {\n            newRoles = getNewRoles({ ...data });\n          }\n          if (newRoles && newRoles.length === 1) {\n            localStorage.setItem('loginAs', newRoles[0].role.name.split('_').join('-'));\n            localStorage.setItem('selectedRole', JSON.stringify(newRoles[0]));\n            props.history.push(`/${newRoles[0].role.name.split('_').join('-')}`);\n          } else props.history.push({ pathname: '/login-as', state: { roles } });\n        }\n        return;\n      })();\n    } else if (status === 422) {\n      setBtnLoading(false);\n      setErrors(errors);\n    } else if (status === 400) {\n      setBtnLoading(false);\n      message && setMessage(message);\n    }\n  };\n\n  return (\n    <SectionWrapper sectionClass=\"sign-in\">\n      <Notification {...notification} />\n      <div className=\"col-md-12\">\n        <div className=\"content-wrapper\">\n          <span className=\"black-heading\">Sign in to your account</span>\n          <form onSubmit={login} className=\"sign-in-form mt-4 text-center\">\n            {message && (\n              <div className=\"err-msg mb-3\">\n                {Cancel}\n                <p>{message}</p>\n              </div>\n            )}\n            <div className=\"form-group mb-3\">\n              <TextInput\n                placeholder=\"Mobile No. / Email ID\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                error={errors && errors['username']}\n              ></TextInput>\n            </div>\n            <div className=\"form-group mb-4\">\n              <TextInput\n                placeholder=\"Password\"\n                value={password}\n                type=\"password\"\n                onChange={e => setPassword(e.target.value)}\n                error={errors && errors['password']}\n                showPass\n              ></TextInput>\n            </div>\n            <div className=\"d-flex justify-content-between px-1 mb-4\">\n              <div className=\"d-flex\">\n                {/* <div className=\"ml-2\">\n                  <Checkbox\n                    name=\"remember-me\"\n                    label=\"Remember Me\"\n                    checked={rememberMe}\n                    onClick={() => setRememberMe(!rememberMe)}\n                  ></Checkbox>\n                </div> */}\n              </div>\n              <div>\n                <Link\n                  className=\"forget-pass mt-1\"\n                  to={'#'}\n                  onClick={() => toggleResendPassModal({ isModalOpen: true, setErrors, setNotification })}\n                >\n                  Forgot password?\n                </Link>\n              </div>\n            </div>\n            <div className=\"form-group mb-4\">\n              <ContainedButton type=\"submit\" red className=\"login-btn\" disabled={btnLoading}>\n                {btnLoading ? (\n                  <div className=\"spinner-border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                  </div>\n                ) : (\n                  <span>Login</span>\n                )}\n              </ContainedButton>\n            </div>\n            <p>\n              Don’t have an account? Register{' '}\n              <NavLink to=\"/packages\" className=\"red-text text-underline\">\n                <u>here</u>\n              </NavLink>{' '}\n              for free\n            </p>\n          </form>\n        </div>\n      </div>\n      <ResetPasswordModal actionObject={resendPassModal} />\n    </SectionWrapper>\n  );\n}\n\nexport default Login;\n","// @flow\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from './Container';\n\nexport const SectionWrapper = ({ children, sectionClass }) => {\n  return (\n    <section className={`section-wrapper ${sectionClass}-section`}>\n      <Container>\n        <div className=\"row section-content-wrapper\">{children}</div>\n      </Container>\n    </section>\n  );\n};\n\nSectionWrapper.propTypes = {\n  sectionClass: PropTypes.string,\n};\n","import React from 'react';\nimport { CheckedRadioButtonIcon, RadioButtonIcon } from '../../../assets/icons';\n\nfunction RadioButton({ className, name, label, value, checked = false, onClick, blue, red }) {\n  return (\n    <div className={`d-flex radio-button ${className}`}>\n      <input\n        type=\"radio\"\n        name={name}\n        value={value}\n        checked={checked}\n        onChange={onClick} //As it is an Input Element onChange method needed for any changeEvent.\n      />\n      <div className=\"mr-2 radio-checked\" onClick={onClick}>\n        {checked ? CheckedRadioButtonIcon : RadioButtonIcon}\n      </div>\n      <label dangerouslySetInnerHTML={{ __html: label }}></label>\n    </div>\n  );\n}\n\nexport default RadioButton;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { CustomModal, ModalHeader, ModalBody, ModalFooter } from './Modal';\nimport TextInput from '../FormInputs/TextInput/TextInput';\nimport { ContainedButton, OutlinedButton } from '../Buttons/Button';\nimport { fetchRequest } from '../../utils/api';\nimport RadioButton from '../FormInputs/RadioButton/RadioButton';\nimport { ProfileContext } from '../../context/context';\n\nconst defaultState = {\n  isModalOpen: false,\n};\nconst ResetPasswordModal = ({ actionObject = defaultState }) => {\n  const { isModalOpen, setErrors, setNotification } = actionObject;\n  const profileContext = useContext(ProfileContext);\n  const [modal, handleModalToggle] = useState(isModalOpen);\n  const [sendTo, setSendTo] = useState('mobile');\n  const [mobileToSendLink, setMobileToSendLink] = useState('');\n  const [btnLoading, setBtnLoading] = useState(false);\n\n  useEffect(() => {\n    handleModalToggle(isModalOpen);\n  }, [actionObject, isModalOpen]);\n\n  const handleForgetPass = async e => {\n    setErrors({});\n    setBtnLoading(true);\n    setNotification({ show: false, message: '', type: '' });\n    e.preventDefault();\n    const res = await fetchRequest({\n      url: profileContext ? '/user_profile/forgot_password' : '/forgot_password',\n      method: profileContext ? 'PUT' : 'POST',\n      isAuth: profileContext ? true : false,\n      body: profileContext ? { send_to: sendTo } : { mobile: mobileToSendLink },\n    });\n    res && setBtnLoading(false);\n    if (res && res.status === 200) {\n      const data = await res.json();\n      if (data.success) {\n        handleModalToggle(false);\n        data.message && setNotification({ show: true, message: data.message, type: 'success' });\n      }\n    } else {\n      const errObj = await res.json();\n      setErrors({ ...errObj.errors });\n      res.status !== 422 &&\n        !Object.keys(errObj.error ? errObj.error : {}).length &&\n        errObj.message &&\n        setNotification({ show: true, message: errObj.message, type: 'error' });\n    }\n    return;\n  };\n\n  // const onHandleChange = (value, key) => {\n  //   let obj = { ...initials };\n  //   obj[key] = value;\n  //   // setInitials({ ...obj });\n  // };\n\n  const { mobile } = profileContext ? (profileContext.profile ? profileContext.profile : {}) : {};\n  return (\n    <CustomModal className=\"my-profile-modal\" modalIsOpen={modal} closeModal={handleModalToggle}>\n      <ModalHeader className=\"text-center\">\n        <h6 className=\"black-heading\">{profileContext ? 'Reset Current Password' : 'Forgot Password'}</h6>\n      </ModalHeader>\n      <ModalBody className=\"mb-2\">\n        {profileContext ? (\n          <>\n            <p className=\"modal-msg\">You will receive a link to reset your current password. Where would you like to receive that link?</p>\n            <form className=\"book-demo-form pl-2 pr-4\">\n              <div className=\"d-flex my-3\">\n                {/* <div>\n                  <RadioButton\n                    className=\"mr-5\"\n                    label=\"On Email ID\"\n                    checked={sendTo === 'email'}\n                    onClick={() => setSendTo('email')}\n                  ></RadioButton>\n                  <span className=\"modal-info\">{email}</span>\n                </div> */}\n                <div>\n                  <RadioButton\n                    className=\"mr-5\"\n                    label=\"On Mobile No.\"\n                    checked={sendTo === 'mobile'}\n                    onClick={() => setSendTo('mobile')}\n                  ></RadioButton>\n                  <span className=\"modal-info\">{mobile}</span>\n                </div>\n              </div>\n            </form>\n          </>\n        ) : (\n          <>\n            <p className=\"modal-msg\">You will receive a link to reset your password. Please enter your mobile no.</p>\n            <form className=\"book-demo-form pl-2 pr-4\">\n              <div className=\"d-flex my-3\">\n                <div className=\"form-group mb-3 w-75\">\n                  <TextInput\n                    placeholder=\"Mobile No.\"\n                    value={mobileToSendLink || ''} // Its taking null if no value is passed. Hence empty string passed\n                    onChange={e => setMobileToSendLink(e.target.value)}\n                    // error={errors && errors['mobile']}\n                  ></TextInput>\n                </div>\n              </div>\n            </form>\n          </>\n        )}\n      </ModalBody>\n      <ModalFooter className={profileContext ? 'justify-content-center' : 'justify-content-end'}>\n        <OutlinedButton className=\"close-modal-btn\" onClick={() => handleModalToggle(false)} disabled={btnLoading}>\n          Cancel\n        </OutlinedButton>\n        <ContainedButton\n          onClick={handleForgetPass}\n          lightBlue={profileContext ? true : false}\n          red={!profileContext ? true : false}\n          disabled={btnLoading}\n          loading={btnLoading}\n        >\n          Send Link\n        </ContainedButton>\n      </ModalFooter>\n    </CustomModal>\n  );\n};\nexport default ResetPasswordModal;\n"],"sourceRoot":""}