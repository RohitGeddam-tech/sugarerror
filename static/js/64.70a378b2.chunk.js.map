{"version":3,"sources":["components/FormInputs/TextInput/TextInput.jsx","components/Notification/Notification.jsx","pages/Prelogin/SetNewPassword/SetNewPassword.jsx","components/Wrappers/SectionWrapper.jsx"],"names":["TextInput","type","placeholder","value","name","onChange","onBlur","error","disabled","icon","className","hasGrayBack","showPass","maxLength","ref","useState","showPassword","setShowPassword","hasError","inputRef","useRef","autoComplete","onClick","hidePasswordEye","showPasswordEye","Notification","message","callback","notify","useCallback","toast","success","position","POSITION","BOTTOM_RIGHT","setTimeout","info","warn","useEffect","defaultState","password","confirm_password","SetNewPassword","props","tokenId","useParams","initials","setInitials","errors","setErrors","btnLoading","setBtnLoading","show","notification","setNotification","minimunLength","containMix","containNumber","validation","setvalidations","onHandleChange","key","obj","validatePassword","tempValidation","length","test","submitNewPassword","e","a","preventDefault","fetchRequest","url","method","body","res","status","json","history","push","sectionClass","onSubmit","target","CheckedCircleSuccess","black","class","role","SectionWrapper","children"],"mappings":"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","file":"static/js/64.70a378b2.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport { hidePasswordEye, showPasswordEye } from '../../../assets/icons';\n\nfunction TextInput({\n  type,\n  placeholder,\n  value,\n  name,\n  onChange,\n  onBlur,\n  error,\n  disabled = false,\n  icon,\n  className = '',\n  hasGrayBack = false,\n  showPass,\n  maxLength,\n  ref,\n}) {\n  const [showPassword, setShowPassword] = useState(false);\n  let hasError = error ? 'has-error' : '';\n  className += ` form-control `;\n  const inputRef = useRef(null);\n  return (\n    <>\n      <div className={`input-group text-input ${hasError} ${hasGrayBack ? 'background-gray' : ''}`}>\n        <input\n          type={(showPass ? (!showPassword ? 'password' : 'text') : type) || 'text'}\n          className={className}\n          name={name}\n          value={value}\n          onChange={onChange}\n          autoComplete=\"off\"\n          ref={ref || inputRef}\n          disabled={disabled}\n          onBlur={onBlur}\n          maxLength={maxLength}\n        />\n        <label className=\"input-placeholder\">{placeholder}</label>\n        {icon ? <span className=\"input-icon\">{icon}</span> : <></>}\n        {showPass ? (\n          <span className=\"input-icon cursor-pointer\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? hidePasswordEye : showPasswordEye}\n          </span>\n        ) : (\n          <></>\n        )}\n        {error ? <p className=\"assistive-text error-text\">{error}</p> : <p className=\"assistive-text\"></p>}\n      </div>\n    </>\n  );\n}\nexport default TextInput;\n","import React, { useEffect, useCallback } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Notification({ message, type, callback }) {\n  const notify = useCallback(\n    type => {\n      switch (type) {\n        case 'success': {\n          toast.success(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          setTimeout(() => {\n            callback && callback();\n          }, 1500);\n          break;\n        }\n        case 'error':\n          toast.error(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'info':\n          toast.info(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        case 'warn':\n          toast.warn(message, {\n            position: toast.POSITION.BOTTOM_RIGHT,\n          });\n          break;\n        default:\n          break;\n      }\n    },\n    [callback, message],\n  );\n\n  useEffect(() => {\n    if (message && type) notify(type);\n  }, [message, notify, type]);\n\n  return (\n    <div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport Notification from '../../../components/Notification/Notification';\nimport { ContainedButton } from '../../../components/Buttons/Button';\nimport TextInput from '../../../components/FormInputs/TextInput/TextInput';\nimport { SectionWrapper } from '../../../components/Wrappers/SectionWrapper';\nimport { fetchRequest } from '../../../utils/api';\nimport { useParams } from 'react-router-dom';\nimport { CheckedCircleSuccess } from '../../../assets/icons';\n\nconst defaultState = {\n  password: '',\n  confirm_password: '',\n};\n\nfunction SetNewPassword(props) {\n  const { tokenId } = useParams();\n  const [initials, setInitials] = useState(defaultState);\n  const [errors, setErrors] = useState();\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: '' });\n  const [validation, setvalidations] = useState([{ minimunLength: false }, { containMix: false }, { containNumber: false }]);\n\n  const onHandleChange = (value, key) => {\n    let obj = { ...initials };\n    obj[key] = value;\n    if (key === 'password') validatePassword(value);\n    setInitials({ ...obj });\n  };\n\n  const validatePassword = password => {\n    const tempValidation = { ...validation };\n    var mixExp = /(?=.*[a-z])(?=.*[A-Z])/,\n      numberExp = /(?=.*\\d)/;\n\n    tempValidation['minimunLength'] = password.length >= 8 ? true : false;\n\n    tempValidation['containMix'] = mixExp.test(password) ? true : false;\n\n    tempValidation['containNumber'] = numberExp.test(password) ? true : false;\n\n    setvalidations(tempValidation);\n  };\n\n  //login api call\n  const submitNewPassword = async e => {\n    e.preventDefault();\n    setBtnLoading(true);\n    setErrors({});\n    const { password, confirm_password } = initials;\n    const res = await fetchRequest({\n      url: `/create_password/${tokenId}`,\n      method: 'POST',\n      body: { password: password || '', confirm_password: confirm_password || '' },\n    });\n    setBtnLoading(false);\n    if (res && res.status === 200) {\n      const { message } = await res.json();\n      message && setNotification({ show: false, message: message, type: 'success' });\n      setTimeout(() => {\n        props.history.push('/sign-in');\n      }, 2000);\n    } else if (res && res.status === 422) {\n      const { errors } = await res.json();\n      setErrors(errors);\n    } else if (res && res.status === 400) {\n      const { message } = await res.json();\n      message && setNotification({ show: false, message: message, type: 'error' });\n    }\n  };\n\n  const { password, confirm_password } = initials;\n  return (\n    <SectionWrapper sectionClass=\"sign-in\">\n      <Notification {...notification} />\n      <div className=\"col-md-12\">\n        <div className=\"content-wrapper\">\n          <span className=\"black-heading\">Set Your New Password</span>\n          <form onSubmit={submitNewPassword} className=\"sign-in-form mt-4 text-center\">\n            <div className=\"form-group mb-3\">\n              <TextInput\n                placeholder=\"Enter Password\"\n                value={password}\n                type=\"password\"\n                onChange={e => onHandleChange(e.target.value, 'password')}\n                error={errors && errors['password']}\n                showPass\n              ></TextInput>\n            </div>\n            <div className=\"form-group mb-4\">\n              <TextInput\n                placeholder=\"Confirm Password\"\n                value={confirm_password}\n                type=\"password\"\n                onChange={e => onHandleChange(e.target.value, 'confirm_password')}\n                error={errors && errors['confirm_password']}\n                showPass\n              ></TextInput>\n            </div>\n            <div className=\"ml-1 mb-4 text-left password-validation\">\n              Password should contain :\n              <ul>\n                <li className={`d-flex ${validation.minimunLength ? 'validated' : ''}`}>\n                  <p className=\"validation-icon\">{CheckedCircleSuccess}</p>\n                  <p className=\"validation-text\">Minimum 8 Digits</p>\n                </li>\n                <li className={`d-flex ${validation.containMix ? 'validated' : ''}`}>\n                  <p className=\"validation-icon\">{CheckedCircleSuccess}</p>\n                  <p className=\"validation-text\">Mix of UPPERCASE and lowercase</p>\n                </li>\n                <li className={`d-flex ${validation.containNumber ? 'validated' : ''}`}>\n                  <p className=\"validation-icon\">{CheckedCircleSuccess}</p>\n                  <p className=\"validation-text\">A number (0-9)</p>\n                </li>\n              </ul>\n            </div>\n            <div className=\"form-group mb-4\">\n              <ContainedButton\n                type=\"submit\"\n                black\n                className=\"login-btn\"\n                disabled={btnLoading || !(validation.minimunLength && validation.containMix && validation.containNumber)}\n              >\n                {btnLoading ? (\n                  <div class=\"spinner-border\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                  </div>\n                ) : (\n                  <span>Set Password</span>\n                )}\n              </ContainedButton>\n            </div>\n          </form>\n        </div>\n      </div>\n    </SectionWrapper>\n  );\n}\n\nexport default SetNewPassword;\n","// @flow\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from './Container';\n\nexport const SectionWrapper = ({ children, sectionClass }) => {\n  return (\n    <section className={`section-wrapper ${sectionClass}-section`}>\n      <Container>\n        <div className=\"row section-content-wrapper\">{children}</div>\n      </Container>\n    </section>\n  );\n};\n\nSectionWrapper.propTypes = {\n  sectionClass: PropTypes.string,\n};\n"],"sourceRoot":""}